/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface OdsBanner {
        /**
          * Displays the banner
          * @default true
         */
        "active"?: boolean;
        /**
          * The human-readable content displayed along side the headline within the banner.
         */
        "content": string;
        /**
          * Displays a dismiss button for the banner
         */
        "dismissable"?: boolean;
        /**
          * The title of the banner.
         */
        "headline"?: string;
        /**
          * Describes the visual variant for the banner.
          * @default 'info'
         */
        "variant": 'info' | 'danger' | 'caution';
    }
    /**
     * Issues
     *  - font-family should be removed from css for button, it should be inherited from `html`
     */
    interface OdsButton {
        /**
          * Disables the button
         */
        "disabled": boolean;
        /**
          * Describes the visual variant for the button.
         */
        "variant": 'primary' | 'secondary' | 'danger' | 'overlay' | 'clear' | 'dismiss';
    }
    interface OdsCheckbox {
        /**
          * Indicates whether the checkbox is checked by default
         */
        "checked"?: boolean;
        /**
          * Disables the input control
         */
        "disabled"?: boolean;
        "element": HTMLInputElement;
        /**
          * Indicates that the input elements checked value is neither true nor false.
         */
        "indeterminate"?: boolean;
        /**
          * Specifies the the validity of the element value.
         */
        "invalid": boolean;
        /**
          * Assigns a name to the input control.
         */
        "name": string;
        /**
          * Specifies that an input field must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the intial value for the control.
         */
        "value": string;
    }
    interface OdsIcon {
        /**
          * Describes the visual variant for the icon.
         */
        "type": | 'caution'
    | 'close'
    | 'complete'
    | 'copy'
    | 'delete'
    | 'download'
    | 'edit'
    | 'error'
    | 'filter'
    | 'get-info'
    | 'go-backward'
    | 'go-forward'
    | 'minus'
    | 'notification'
    | 'plus'
    | 'search'
    | 'settings'
    | 'user';
    }
    interface OdsInfobox {
        /**
          * The human-readable content displayed along side the headline within the infobox.
         */
        "content": string;
        /**
          * The title of the infobox.
         */
        "headline"?: string;
        /**
          * Describes the visual variant for the infobox.
          * @default 'info'
         */
        "variant": 'info' | 'danger' | 'caution' | 'success';
    }
    interface OdsInputText {
        /**
          * Specifies for enabling or disabling of autocomplete in <input> element
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Disables the input control
         */
        "disabled"?: boolean;
        /**
          * Specifies the the validity of the element value.
         */
        "invalid": boolean;
        /**
          * Assigns a name to the input control.
         */
        "label": string;
        /**
          * Specifies the maximum permissible value, this is used in types date, month, week, time and datetime-local only.
         */
        "max"?: number;
        /**
          * Specifies the maximum amount of characters permissible in the input element.
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum permissible value, this is used in types date, month, week, time and datetime-local only.
         */
        "min"?: string;
        /**
          * Specifies the minimum amount of characters permissible in the input element.
         */
        "minlength"?: number;
        /**
          * Assigns a name to the input control.
         */
        "name": string;
        /**
          * Specifies a short hint that describes the expected value.
         */
        "placeholder"?: string;
        /**
          * Sets the input control value to read-only. This prevents the user from changing the value, however unlike disabled the element can continue to recieve focus.
         */
        "readonly"?: string;
        /**
          * Specifies that an input field must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the type of control.
         */
        "type": 'text'
  | 'button'
  | 'date'
  | 'datetime-local'
  | 'email'
  | 'month'
  | 'number'
  | 'password'
  | 'search'
  | 'tel'
  | 'text'
  | 'time'
  | 'url'
  | 'week';
        /**
          * Specifies the intial value for the control.
         */
        "value": string;
    }
    interface OdsLink {
        /**
          * Defines the ARIA role for the link element.
         */
        "ariaRole"?: 'button' | 'checkbox' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'option' | 'radio' | 'switch' | 'tab' | 'treeitem';
        /**
          * Whether to download the resource instead of navigating to it, and its filename if so
         */
        "download"?: string;
        /**
          * The address of the hyperlink
         */
        "href": string;
        /**
          * Human language of the linked resource
         */
        "hreflang"?: string;
        /**
          * URLs to ping
         */
        "ping"?: string;
        /**
          * Referrer policy for fetches initiated by the element
         */
        "referrerpolicy"?: string;
        /**
          * Relationship between the location in the document containing the hyperlink and the destination resource
         */
        "rel"?: string;
        /**
          * Browsing context for the hyperlink navigation
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * Hint for the type of the referenced resource
         */
        "type"?: string;
    }
    interface OdsModal {
        /**
          * Determines the display of the modal.
          * @default false
         */
        "active": boolean;
    }
    interface OdsRadioButton {
        /**
          * Indicates whether the checkbox is checked by default
         */
        "checked"?: boolean;
        /**
          * Disables the input control
         */
        "disabled"?: boolean;
        "element": HTMLInputElement;
        /**
          * Indicates that the input elements checked value is neither true nor false.
         */
        "indeterminate"?: boolean;
        /**
          * Specifies the the validity of the element value.
         */
        "invalid": boolean;
        /**
          * Assigns a name to the input control.
         */
        "name": string;
        /**
          * Specifies that an input field must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the intial value for the control.
         */
        "value": string;
    }
    interface OdsRadioGroup {
    }
    /**
     * - using a definition list here is great when there are multiple inter-related statuses but can be
     * Issues:
     */
    interface OdsStatus {
        /**
          * Defines the ARIA role for the status element.
          * @default 'status'
         */
        "ariaRole"?: 'alert' | 'log' | 'marquee' | 'status' | 'timer';
        /**
          * A descriptor which appears above the visual status indicator.
         */
        "label"?: string;
        /**
          * Visually hides the label.
         */
        "labelHidden": boolean;
        /**
          * The human-readable displayed aloing side the visual status indicator.
         */
        "value": string;
        /**
          * Describes the visual variant for the Status.
         */
        "variant": 'neutral' | 'success' | 'caution' | 'danger';
    }
    interface OdsTabpanel {
        /**
          * A label which describes the contents of the modal to assistive devices.
          * @default true
         */
        "hidden": boolean;
    }
    interface OdsTabs {
        /**
          * A label which describes the contents of the modal to assistive devices.
         */
        "ariaLabel": string;
        /**
          * A label which describes the contents of the modal to assistive devices.
         */
        "initialTabpanelIndex": number;
    }
    interface OdsTag {
    }
    interface OdsTagList {
    }
    interface OdsTitle {
        /**
          * Specifies for enabling or disabling of autocomplete in <input> element
         */
        "level"?: '1' | '2' | '3' | '4' | '5' | '6';
        /**
          * Specifies for enabling or disabling of autocomplete in <input> element
         */
        "visualLevel"?: '1' | '2' | '3' | '4' | '5' | '6';
    }
    interface OdsToast {
        /**
          * Displays the banner
          * @default true
         */
        "active"?: boolean;
        /**
          * Body text displayed beaneath the toast title
         */
        "body": string;
        /**
          * Title message displayed on the toast
         */
        "heading"?: string;
        /**
          * Describes the visual variant the toast banner.
         */
        "variant": 'info' | 'success' | 'caution' | 'danger';
    }
    interface OdsToastPen {
        "addToast": (toast: any) => Promise<void>;
    }
    interface OdsTooltip {
        /**
          * Describes the human-readble text diplayed within the tooltip.
         */
        "label": string;
        /**
          * Describes the position of the tooltip relative to the content in the slot.
         */
        "position": 'top' | 'right' | 'bottom' | 'left';
    }
}
export interface OdsBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOdsBannerElement;
}
export interface OdsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOdsCheckboxElement;
}
export interface OdsInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOdsInputTextElement;
}
export interface OdsRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOdsRadioButtonElement;
}
export interface OdsToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOdsToastElement;
}
declare global {
    interface HTMLOdsBannerElementEventMap {
        "dismissed": boolean;
    }
    interface HTMLOdsBannerElement extends Components.OdsBanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOdsBannerElementEventMap>(type: K, listener: (this: HTMLOdsBannerElement, ev: OdsBannerCustomEvent<HTMLOdsBannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOdsBannerElementEventMap>(type: K, listener: (this: HTMLOdsBannerElement, ev: OdsBannerCustomEvent<HTMLOdsBannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOdsBannerElement: {
        prototype: HTMLOdsBannerElement;
        new (): HTMLOdsBannerElement;
    };
    /**
     * Issues
     *  - font-family should be removed from css for button, it should be inherited from `html`
     */
    interface HTMLOdsButtonElement extends Components.OdsButton, HTMLStencilElement {
    }
    var HTMLOdsButtonElement: {
        prototype: HTMLOdsButtonElement;
        new (): HTMLOdsButtonElement;
    };
    interface HTMLOdsCheckboxElementEventMap {
        "ods-input": any;
    }
    interface HTMLOdsCheckboxElement extends Components.OdsCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOdsCheckboxElementEventMap>(type: K, listener: (this: HTMLOdsCheckboxElement, ev: OdsCheckboxCustomEvent<HTMLOdsCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOdsCheckboxElementEventMap>(type: K, listener: (this: HTMLOdsCheckboxElement, ev: OdsCheckboxCustomEvent<HTMLOdsCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOdsCheckboxElement: {
        prototype: HTMLOdsCheckboxElement;
        new (): HTMLOdsCheckboxElement;
    };
    interface HTMLOdsIconElement extends Components.OdsIcon, HTMLStencilElement {
    }
    var HTMLOdsIconElement: {
        prototype: HTMLOdsIconElement;
        new (): HTMLOdsIconElement;
    };
    interface HTMLOdsInfoboxElement extends Components.OdsInfobox, HTMLStencilElement {
    }
    var HTMLOdsInfoboxElement: {
        prototype: HTMLOdsInfoboxElement;
        new (): HTMLOdsInfoboxElement;
    };
    interface HTMLOdsInputTextElementEventMap {
        "ods-input": any;
    }
    interface HTMLOdsInputTextElement extends Components.OdsInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOdsInputTextElementEventMap>(type: K, listener: (this: HTMLOdsInputTextElement, ev: OdsInputTextCustomEvent<HTMLOdsInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOdsInputTextElementEventMap>(type: K, listener: (this: HTMLOdsInputTextElement, ev: OdsInputTextCustomEvent<HTMLOdsInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOdsInputTextElement: {
        prototype: HTMLOdsInputTextElement;
        new (): HTMLOdsInputTextElement;
    };
    interface HTMLOdsLinkElement extends Components.OdsLink, HTMLStencilElement {
    }
    var HTMLOdsLinkElement: {
        prototype: HTMLOdsLinkElement;
        new (): HTMLOdsLinkElement;
    };
    interface HTMLOdsModalElement extends Components.OdsModal, HTMLStencilElement {
    }
    var HTMLOdsModalElement: {
        prototype: HTMLOdsModalElement;
        new (): HTMLOdsModalElement;
    };
    interface HTMLOdsRadioButtonElementEventMap {
        "ods-input": any;
    }
    interface HTMLOdsRadioButtonElement extends Components.OdsRadioButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOdsRadioButtonElementEventMap>(type: K, listener: (this: HTMLOdsRadioButtonElement, ev: OdsRadioButtonCustomEvent<HTMLOdsRadioButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOdsRadioButtonElementEventMap>(type: K, listener: (this: HTMLOdsRadioButtonElement, ev: OdsRadioButtonCustomEvent<HTMLOdsRadioButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOdsRadioButtonElement: {
        prototype: HTMLOdsRadioButtonElement;
        new (): HTMLOdsRadioButtonElement;
    };
    interface HTMLOdsRadioGroupElement extends Components.OdsRadioGroup, HTMLStencilElement {
    }
    var HTMLOdsRadioGroupElement: {
        prototype: HTMLOdsRadioGroupElement;
        new (): HTMLOdsRadioGroupElement;
    };
    /**
     * - using a definition list here is great when there are multiple inter-related statuses but can be
     * Issues:
     */
    interface HTMLOdsStatusElement extends Components.OdsStatus, HTMLStencilElement {
    }
    var HTMLOdsStatusElement: {
        prototype: HTMLOdsStatusElement;
        new (): HTMLOdsStatusElement;
    };
    interface HTMLOdsTabpanelElement extends Components.OdsTabpanel, HTMLStencilElement {
    }
    var HTMLOdsTabpanelElement: {
        prototype: HTMLOdsTabpanelElement;
        new (): HTMLOdsTabpanelElement;
    };
    interface HTMLOdsTabsElement extends Components.OdsTabs, HTMLStencilElement {
    }
    var HTMLOdsTabsElement: {
        prototype: HTMLOdsTabsElement;
        new (): HTMLOdsTabsElement;
    };
    interface HTMLOdsTagElement extends Components.OdsTag, HTMLStencilElement {
    }
    var HTMLOdsTagElement: {
        prototype: HTMLOdsTagElement;
        new (): HTMLOdsTagElement;
    };
    interface HTMLOdsTagListElement extends Components.OdsTagList, HTMLStencilElement {
    }
    var HTMLOdsTagListElement: {
        prototype: HTMLOdsTagListElement;
        new (): HTMLOdsTagListElement;
    };
    interface HTMLOdsTitleElement extends Components.OdsTitle, HTMLStencilElement {
    }
    var HTMLOdsTitleElement: {
        prototype: HTMLOdsTitleElement;
        new (): HTMLOdsTitleElement;
    };
    interface HTMLOdsToastElementEventMap {
        "dismissed": boolean;
    }
    interface HTMLOdsToastElement extends Components.OdsToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOdsToastElementEventMap>(type: K, listener: (this: HTMLOdsToastElement, ev: OdsToastCustomEvent<HTMLOdsToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOdsToastElementEventMap>(type: K, listener: (this: HTMLOdsToastElement, ev: OdsToastCustomEvent<HTMLOdsToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOdsToastElement: {
        prototype: HTMLOdsToastElement;
        new (): HTMLOdsToastElement;
    };
    interface HTMLOdsToastPenElement extends Components.OdsToastPen, HTMLStencilElement {
    }
    var HTMLOdsToastPenElement: {
        prototype: HTMLOdsToastPenElement;
        new (): HTMLOdsToastPenElement;
    };
    interface HTMLOdsTooltipElement extends Components.OdsTooltip, HTMLStencilElement {
    }
    var HTMLOdsTooltipElement: {
        prototype: HTMLOdsTooltipElement;
        new (): HTMLOdsTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "ods-banner": HTMLOdsBannerElement;
        "ods-button": HTMLOdsButtonElement;
        "ods-checkbox": HTMLOdsCheckboxElement;
        "ods-icon": HTMLOdsIconElement;
        "ods-infobox": HTMLOdsInfoboxElement;
        "ods-input-text": HTMLOdsInputTextElement;
        "ods-link": HTMLOdsLinkElement;
        "ods-modal": HTMLOdsModalElement;
        "ods-radio-button": HTMLOdsRadioButtonElement;
        "ods-radio-group": HTMLOdsRadioGroupElement;
        "ods-status": HTMLOdsStatusElement;
        "ods-tabpanel": HTMLOdsTabpanelElement;
        "ods-tabs": HTMLOdsTabsElement;
        "ods-tag": HTMLOdsTagElement;
        "ods-tag-list": HTMLOdsTagListElement;
        "ods-title": HTMLOdsTitleElement;
        "ods-toast": HTMLOdsToastElement;
        "ods-toast-pen": HTMLOdsToastPenElement;
        "ods-tooltip": HTMLOdsTooltipElement;
    }
}
declare namespace LocalJSX {
    interface OdsBanner {
        /**
          * Displays the banner
          * @default true
         */
        "active"?: boolean;
        /**
          * The human-readable content displayed along side the headline within the banner.
         */
        "content"?: string;
        /**
          * Displays a dismiss button for the banner
         */
        "dismissable"?: boolean;
        /**
          * The title of the banner.
         */
        "headline"?: string;
        /**
          * Event: Fired when the ods-banner is dismissed by the user.
         */
        "onDismissed"?: (event: OdsBannerCustomEvent<boolean>) => void;
        /**
          * Describes the visual variant for the banner.
          * @default 'info'
         */
        "variant"?: 'info' | 'danger' | 'caution';
    }
    /**
     * Issues
     *  - font-family should be removed from css for button, it should be inherited from `html`
     */
    interface OdsButton {
        /**
          * Disables the button
         */
        "disabled"?: boolean;
        /**
          * Describes the visual variant for the button.
         */
        "variant"?: 'primary' | 'secondary' | 'danger' | 'overlay' | 'clear' | 'dismiss';
    }
    interface OdsCheckbox {
        /**
          * Indicates whether the checkbox is checked by default
         */
        "checked"?: boolean;
        /**
          * Disables the input control
         */
        "disabled"?: boolean;
        "element"?: HTMLInputElement;
        /**
          * Indicates that the input elements checked value is neither true nor false.
         */
        "indeterminate"?: boolean;
        /**
          * Specifies the the validity of the element value.
         */
        "invalid"?: boolean;
        /**
          * Assigns a name to the input control.
         */
        "name"?: string;
        "onOds-input"?: (event: OdsCheckboxCustomEvent<any>) => void;
        /**
          * Specifies that an input field must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the intial value for the control.
         */
        "value"?: string;
    }
    interface OdsIcon {
        /**
          * Describes the visual variant for the icon.
         */
        "type"?: | 'caution'
    | 'close'
    | 'complete'
    | 'copy'
    | 'delete'
    | 'download'
    | 'edit'
    | 'error'
    | 'filter'
    | 'get-info'
    | 'go-backward'
    | 'go-forward'
    | 'minus'
    | 'notification'
    | 'plus'
    | 'search'
    | 'settings'
    | 'user';
    }
    interface OdsInfobox {
        /**
          * The human-readable content displayed along side the headline within the infobox.
         */
        "content"?: string;
        /**
          * The title of the infobox.
         */
        "headline"?: string;
        /**
          * Describes the visual variant for the infobox.
          * @default 'info'
         */
        "variant"?: 'info' | 'danger' | 'caution' | 'success';
    }
    interface OdsInputText {
        /**
          * Specifies for enabling or disabling of autocomplete in <input> element
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Disables the input control
         */
        "disabled"?: boolean;
        /**
          * Specifies the the validity of the element value.
         */
        "invalid"?: boolean;
        /**
          * Assigns a name to the input control.
         */
        "label"?: string;
        /**
          * Specifies the maximum permissible value, this is used in types date, month, week, time and datetime-local only.
         */
        "max"?: number;
        /**
          * Specifies the maximum amount of characters permissible in the input element.
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum permissible value, this is used in types date, month, week, time and datetime-local only.
         */
        "min"?: string;
        /**
          * Specifies the minimum amount of characters permissible in the input element.
         */
        "minlength"?: number;
        /**
          * Assigns a name to the input control.
         */
        "name"?: string;
        "onOds-input"?: (event: OdsInputTextCustomEvent<any>) => void;
        /**
          * Specifies a short hint that describes the expected value.
         */
        "placeholder"?: string;
        /**
          * Sets the input control value to read-only. This prevents the user from changing the value, however unlike disabled the element can continue to recieve focus.
         */
        "readonly"?: string;
        /**
          * Specifies that an input field must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the type of control.
         */
        "type"?: 'text'
  | 'button'
  | 'date'
  | 'datetime-local'
  | 'email'
  | 'month'
  | 'number'
  | 'password'
  | 'search'
  | 'tel'
  | 'text'
  | 'time'
  | 'url'
  | 'week';
        /**
          * Specifies the intial value for the control.
         */
        "value"?: string;
    }
    interface OdsLink {
        /**
          * Defines the ARIA role for the link element.
         */
        "ariaRole"?: 'button' | 'checkbox' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'option' | 'radio' | 'switch' | 'tab' | 'treeitem';
        /**
          * Whether to download the resource instead of navigating to it, and its filename if so
         */
        "download"?: string;
        /**
          * The address of the hyperlink
         */
        "href"?: string;
        /**
          * Human language of the linked resource
         */
        "hreflang"?: string;
        /**
          * URLs to ping
         */
        "ping"?: string;
        /**
          * Referrer policy for fetches initiated by the element
         */
        "referrerpolicy"?: string;
        /**
          * Relationship between the location in the document containing the hyperlink and the destination resource
         */
        "rel"?: string;
        /**
          * Browsing context for the hyperlink navigation
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * Hint for the type of the referenced resource
         */
        "type"?: string;
    }
    interface OdsModal {
        /**
          * Determines the display of the modal.
          * @default false
         */
        "active"?: boolean;
    }
    interface OdsRadioButton {
        /**
          * Indicates whether the checkbox is checked by default
         */
        "checked"?: boolean;
        /**
          * Disables the input control
         */
        "disabled"?: boolean;
        "element"?: HTMLInputElement;
        /**
          * Indicates that the input elements checked value is neither true nor false.
         */
        "indeterminate"?: boolean;
        /**
          * Specifies the the validity of the element value.
         */
        "invalid"?: boolean;
        /**
          * Assigns a name to the input control.
         */
        "name"?: string;
        "onOds-input"?: (event: OdsRadioButtonCustomEvent<any>) => void;
        /**
          * Specifies that an input field must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * Specifies the intial value for the control.
         */
        "value"?: string;
    }
    interface OdsRadioGroup {
    }
    /**
     * - using a definition list here is great when there are multiple inter-related statuses but can be
     * Issues:
     */
    interface OdsStatus {
        /**
          * Defines the ARIA role for the status element.
          * @default 'status'
         */
        "ariaRole"?: 'alert' | 'log' | 'marquee' | 'status' | 'timer';
        /**
          * A descriptor which appears above the visual status indicator.
         */
        "label"?: string;
        /**
          * Visually hides the label.
         */
        "labelHidden"?: boolean;
        /**
          * The human-readable displayed aloing side the visual status indicator.
         */
        "value"?: string;
        /**
          * Describes the visual variant for the Status.
         */
        "variant"?: 'neutral' | 'success' | 'caution' | 'danger';
    }
    interface OdsTabpanel {
        /**
          * A label which describes the contents of the modal to assistive devices.
          * @default true
         */
        "hidden"?: boolean;
    }
    interface OdsTabs {
        /**
          * A label which describes the contents of the modal to assistive devices.
         */
        "ariaLabel"?: string;
        /**
          * A label which describes the contents of the modal to assistive devices.
         */
        "initialTabpanelIndex"?: number;
    }
    interface OdsTag {
    }
    interface OdsTagList {
    }
    interface OdsTitle {
        /**
          * Specifies for enabling or disabling of autocomplete in <input> element
         */
        "level"?: '1' | '2' | '3' | '4' | '5' | '6';
        /**
          * Specifies for enabling or disabling of autocomplete in <input> element
         */
        "visualLevel"?: '1' | '2' | '3' | '4' | '5' | '6';
    }
    interface OdsToast {
        /**
          * Displays the banner
          * @default true
         */
        "active"?: boolean;
        /**
          * Body text displayed beaneath the toast title
         */
        "body"?: string;
        /**
          * Title message displayed on the toast
         */
        "heading"?: string;
        /**
          * Event: Fired when the ods-toast is dismissed.
         */
        "onDismissed"?: (event: OdsToastCustomEvent<boolean>) => void;
        /**
          * Describes the visual variant the toast banner.
         */
        "variant"?: 'info' | 'success' | 'caution' | 'danger';
    }
    interface OdsToastPen {
    }
    interface OdsTooltip {
        /**
          * Describes the human-readble text diplayed within the tooltip.
         */
        "label"?: string;
        /**
          * Describes the position of the tooltip relative to the content in the slot.
         */
        "position"?: 'top' | 'right' | 'bottom' | 'left';
    }
    interface IntrinsicElements {
        "ods-banner": OdsBanner;
        "ods-button": OdsButton;
        "ods-checkbox": OdsCheckbox;
        "ods-icon": OdsIcon;
        "ods-infobox": OdsInfobox;
        "ods-input-text": OdsInputText;
        "ods-link": OdsLink;
        "ods-modal": OdsModal;
        "ods-radio-button": OdsRadioButton;
        "ods-radio-group": OdsRadioGroup;
        "ods-status": OdsStatus;
        "ods-tabpanel": OdsTabpanel;
        "ods-tabs": OdsTabs;
        "ods-tag": OdsTag;
        "ods-tag-list": OdsTagList;
        "ods-title": OdsTitle;
        "ods-toast": OdsToast;
        "ods-toast-pen": OdsToastPen;
        "ods-tooltip": OdsTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ods-banner": LocalJSX.OdsBanner & JSXBase.HTMLAttributes<HTMLOdsBannerElement>;
            /**
             * Issues
             *  - font-family should be removed from css for button, it should be inherited from `html`
             */
            "ods-button": LocalJSX.OdsButton & JSXBase.HTMLAttributes<HTMLOdsButtonElement>;
            "ods-checkbox": LocalJSX.OdsCheckbox & JSXBase.HTMLAttributes<HTMLOdsCheckboxElement>;
            "ods-icon": LocalJSX.OdsIcon & JSXBase.HTMLAttributes<HTMLOdsIconElement>;
            "ods-infobox": LocalJSX.OdsInfobox & JSXBase.HTMLAttributes<HTMLOdsInfoboxElement>;
            "ods-input-text": LocalJSX.OdsInputText & JSXBase.HTMLAttributes<HTMLOdsInputTextElement>;
            "ods-link": LocalJSX.OdsLink & JSXBase.HTMLAttributes<HTMLOdsLinkElement>;
            "ods-modal": LocalJSX.OdsModal & JSXBase.HTMLAttributes<HTMLOdsModalElement>;
            "ods-radio-button": LocalJSX.OdsRadioButton & JSXBase.HTMLAttributes<HTMLOdsRadioButtonElement>;
            "ods-radio-group": LocalJSX.OdsRadioGroup & JSXBase.HTMLAttributes<HTMLOdsRadioGroupElement>;
            /**
             * - using a definition list here is great when there are multiple inter-related statuses but can be
             * Issues:
             */
            "ods-status": LocalJSX.OdsStatus & JSXBase.HTMLAttributes<HTMLOdsStatusElement>;
            "ods-tabpanel": LocalJSX.OdsTabpanel & JSXBase.HTMLAttributes<HTMLOdsTabpanelElement>;
            "ods-tabs": LocalJSX.OdsTabs & JSXBase.HTMLAttributes<HTMLOdsTabsElement>;
            "ods-tag": LocalJSX.OdsTag & JSXBase.HTMLAttributes<HTMLOdsTagElement>;
            "ods-tag-list": LocalJSX.OdsTagList & JSXBase.HTMLAttributes<HTMLOdsTagListElement>;
            "ods-title": LocalJSX.OdsTitle & JSXBase.HTMLAttributes<HTMLOdsTitleElement>;
            "ods-toast": LocalJSX.OdsToast & JSXBase.HTMLAttributes<HTMLOdsToastElement>;
            "ods-toast-pen": LocalJSX.OdsToastPen & JSXBase.HTMLAttributes<HTMLOdsToastPenElement>;
            "ods-tooltip": LocalJSX.OdsTooltip & JSXBase.HTMLAttributes<HTMLOdsTooltipElement>;
        }
    }
}
